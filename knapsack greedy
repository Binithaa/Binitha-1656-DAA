#include <stdio.h>
struct Item {
    int value;
    int weight;
};
int compare(const void *a, const void *b) {
    double ratio1 = (double)(((struct Item *)a)->value) / ((struct Item *)a)->weight;
    double ratio2 = (double)(((struct Item *)b)->value) / ((struct Item *)b)->weight;
    if (ratio1 < ratio2)
        return 1;
    else if (ratio1 > ratio2)
        return -1;
    else
        return 0;
}
void knapsackGreedy(struct Item items[], int n, int capacity) {
    sort(items, n, sizeof(items[0]), compare);

    int currentWeight = 0;  
    double finalValue = 0.0;  
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= capacity) {
            currentWeight += items[i].weight;
            finalValue += items[i].value;
        } else {
            int remainingWeight = capacity - currentWeight;
            finalValue += (double)items[i].value / items[i].weight * remainingWeight;
            break;  
        }
    }
    printf("Maximum value in knapsack (using greedy approach): %.2f\n", finalValue);
}

int main() {
    int n;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    
    struct Item items[n];
    printf("Enter the value and weight of each item:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &items[i].value, &items[i].weight);
    }

    int capacity;
    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &capacity);
    knapsackGreedy(items, n, capacity);

    return 0;
}


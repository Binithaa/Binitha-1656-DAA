#include <stdio.h>
#include <stdbool.h>

#define V 5
int path[V];

void printSolution() {
    printf("Hamiltonian Circuit found:\n");
    for (int i = 0; i < V; i++) {
        printf("%d ", path[i]);
    }
    printf("%d", path[0]); 
    printf("\n");
}

bool isSafe(int v, bool graph[V][V], int pos, int path[V]) {
    if (graph[path[pos - 1]][v] == 0) 
        return false;
    for (int i = 0; i < pos; i++) {
        if (path[i] == v) 
            return false;
    }
    return true;
}

bool hamiltonianCycleUtil(bool graph[V][V], int path[V], int pos) {
    if (pos == V) {
        if (graph[path[pos - 1]][path[0]] == 1) 
            return true;
        else
            return false;
    }
    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, pos, path)) {
            path[pos] = v;
            if (hamiltonianCycleUtil(graph, path, pos + 1) == true)
                return true;
            path[pos] = -1; 
        }
    }
    return false;
}

bool hamiltonianCycle(bool graph[V][V]) {
    for (int i = 0; i < V; i++)
        path[i] = -1;

    path[0] = 0; 
    if (hamiltonianCycleUtil(graph, path, 1) == false) {
        printf("Hamiltonian Circuit does not exist\n");
        return false;
    }

    printSolution();
    return true;
}

int main() {
    bool graph[V][V] = {
        {0, 1, 0, 1, 0},
        {1, 0, 1, 1, 1},
        {0, 1, 0, 0, 1},
        {1, 1, 0, 0, 1},
        {0, 1, 1, 1, 0}
    };

    printf("Input graph:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }

    hamiltonianCycle(graph);

    return 0;
}

